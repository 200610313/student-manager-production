{"version":3,"sources":["components/StudentLister.js","components/Student.js","components/StudentList.js","components/StudentsPassedList.js","components/StudentsFailedList.js","components/Summary.js","components/StudentModificationForm.js","components/StudentDashboard.js","App.js","serviceWorker.js","index.js"],"names":["StudentLister","props","state","fName","lName","nGrade","e","update","target","value","this","setState","className","name","onChange","handleFName","bind","type","placeholder","handleLName","handleNGrade","onClick","handleSubmit","Component","Student","modifiedBtnClicked","id","numGrade","buffer","push","Fragment","scope","key","unsorted","handleDelete","toggleForm","defaultProps","StudentList","students","map","stud","StudentsPassedList","StudentsFailedList","Summary","studentsPassed","studentsFailed","StudentModificationForm","useState","nFName","setFName","nLName","setLName","nNGrade","setNGrade","console","log","Modal","show","onHide","toggle","Header","closeButton","Title","Body","InputGroup","Prepend","Text","FormControl","studToModify","aria-label","aria-describedby","Footer","Button","variant","handleModify","StudentDashboard","newStudent","studToAdd","Math","floor","random","studentID","filter","modifiedInfo","newFN","newLN","newNG","trim","undefined","object","find","o","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4a53acd1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// Form for adding a new student\n\nclass StudentLister extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //  For the to-be added student\n      fName: '',\n      lName: '',\n      nGrade: -2\n    };\n  }\n\n  // Updates changes in state for first, last, and numeric grade entries\n  handleFName(e) {\n    const update = e.target.value;\n    this.setState((state, props) => {\n      return { fName: update };\n    });\n  }\n\n  handleLName(e) {\n    const update = e.target.value;\n    this.setState((state, props) => {\n      return { lName: update };\n    });\n  }\n\n  handleNGrade(e) {\n    const update = e.target.value;\n    this.setState((state, props) => {\n      return { nGrade: update };\n    });\n  }\n  //\n\n  render() {\n    const rowStyle = 'row justify-content-center align-items-center mt-2';\n    const colStyle = 'col';\n    return (\n      <div>\n        <form>\n          <div className={rowStyle}>\n            <div className={colStyle}>\n              <input\n                name='fName'\n                onChange={(this.handleFName = this.handleFName.bind(this))}\n                type='text'\n                className='form-control'\n                placeholder='First name'\n              />\n            </div>\n            <div className={colStyle}>\n              <input\n                onChange={(this.handleLName = this.handleLName.bind(this))}\n                type='text'\n                className='form-control'\n                placeholder='Last name'\n              />\n            </div>\n            <div className={colStyle}>\n              <input\n                onChange={(this.handleNGrade = this.handleNGrade.bind(this))}\n                type='text'\n                className='form-control'\n                placeholder='Numeric Grade'\n              />\n            </div>\n            <div className={colStyle}>\n              <button\n                onClick={this.props.handleSubmit.bind(this,[this.state.fName,this.state.lName,this.state.nGrade])}\n                name='submitBtn'\n                type='button'\n                className='btn btn-primary btn-sm btn-block'\n              >\n                Submit\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\nexport default StudentLister;\n","import React, { Component } from 'react';\n/* Returns formatting for StudentList, StudentsFailedList, and StudentsPassedList */\nclass Student extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { modifiedBtnClicked: true };\n  }\n  handleModify(){\n    this.setState((state, props) => { return { modifiedBtnClicked: !state.modifiedBtnClicked }})\n  }\n  render() {\n    const nGrade = //  Letter grade translation\n        this.props.nGrade < 50\n          ? 'F'\n          : this.props.nGrade < 60\n          ? 'D'\n          : this.props.nGrade < 68\n          ? 'C'\n          : this.props.nGrade < 76\n          ? 'B-'\n          : this.props.nGrade < 84\n          ? 'B'\n          : this.props.nGrade < 92\n          ? 'A-'\n          : 'A',\n      id = this.props.id,\n      fName = this.props.fName,\n      lName = this.props.lName,\n      numGrade = this.props.nGrade;\n\n    let buffer = []; //  Contains the proper JSX according to props.unsorted\n    buffer.push(\n      // Push basic data\n      // React.Fragment is used to prevent wrapping with <div>\n      <React.Fragment>\n        <th scope='row' key = {id+1}>{id}</th>\n        <td key = {id+2}>{fName}</td>\n        <td key = {id+3}>{lName}</td>\n        <td key = {id+4}>{numGrade}</td>\n        <td key = {id+5}>{nGrade}</td>\n      </React.Fragment>\n    );\n    if (this.props.unsorted) {\n      // If received StudentList as element, we push delete and modify buttons\n      buffer.push(\n        <React.Fragment>\n          <td>\n            <button\n              onClick={this.props.handleDelete.bind(this, id)} // If clicked, pass the student's ID\n              type='button'\n              className='btn btn-danger btn-block'\n            >\n              Delete\n            </button>\n          </td>\n          <td>\n            <button\n              onClick={this.props.toggleForm.bind(this,this.props.id)}\n              type='button'\n              className='btn btn-info btn-block'\n            >\n              Modify\n            </button>\n          </td>\n        </React.Fragment>\n      );\n    }\n    return (\n      <React.Fragment>\n        <tr>{buffer}</tr>\n      </React.Fragment>\n    );\n  }\n}\nStudent.defaultProps = {\n  unsorted: false\n};\nexport default Student;\n","import React from 'react';\nimport Student from './Student';\n\n/* Returns formatting for the students added through StudentLister */\n\nconst StudentList = (props) => {\n  /* formatting students */\n  const students = props.students.map((stud) => (\n    <Student\n      key={stud.id}\n      id={stud.id}\n      fName={stud.fName}\n      lName={stud.lName}\n      nGrade={stud.nGrade}\n      unsorted={true/* true to return formatting for StudentList (with buttons) */}\n      handleDelete ={props.handleDelete/* passing delete handler */} \n      toggleForm ={props.toggleForm} \n    />\n  ));\n  return (\n    <div>\n      <div className='row mt-2'>\n        <table className='table'>\n          <thead>\n            <tr>\n              <th scope='col'>#</th>\n              <th scope='col'>First Name</th>\n              <th scope='col'>Last Name</th>\n              <th scope='col'>Numeric Grade</th>\n              <th scope='col'>Letter Grade</th>\n            </tr>\n          </thead>\n          <tbody>\n            {/* Displaying students */}\n            {students}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default StudentList;\n","import React from 'react';\nimport Student from './Student';\n\nconst StudentsPassedList = (props) => {\n  const students = props.students.map((stud) => (\n    <Student\n      key={stud.id}\n      id={stud.id}\n      fName={stud.fName}\n      lName={stud.lName}\n      nGrade={stud.nGrade}\n    />\n  ));\n  return (\n    <table className='table table-success'>\n      <thead>\n        <tr>\n          <th scope='col'>#</th>\n          <th scope='col'>First Name</th>\n          <th scope='col'>Last Name</th>\n          <th scope='col'>Numeric Grade</th>\n          <th scope='col'>Letter Grade</th>\n        </tr>\n      </thead>\n      <tbody>{students}</tbody>\n    </table>\n  );\n};\n\nexport default StudentsPassedList;\n","import React from 'react';\nimport Student from './Student';\n\nconst StudentsFailedList = (props) => {\n  const students = props.students.map((stud) => (\n    <Student\n      key={stud.id}\n      id={stud.id}\n      fName={stud.fName}\n      lName={stud.lName}\n      nGrade={stud.nGrade}\n    />\n  ));\n  return (\n    <table className='table table-danger'>\n      <thead>\n        <tr>\n          <th scope='col'>#</th>\n          <th scope='col'>First Name</th>\n          <th scope='col'>Last Name</th>\n          <th scope='col'>Numeric Grade</th>\n          <th scope='col'>Letter Grade</th>\n        </tr>\n      </thead>\n      <tbody>{students}</tbody>\n    </table>\n  );\n};\n\nexport default StudentsFailedList;\n","import React from 'react';\nimport StudentsPassedList from './StudentsPassedList';\nimport StudentsFailedList from './StudentsFailedList';\n\n// Returns proper formatting for StudentsPassedList and StudentsFailedList\n\nconst Summary = (props) => {\n  const rowStyle = 'row justify-content-center align-items-start mt-2';\n  const colStyle = 'col-sm-6';\n\n  //  Holds the info of the students\n  const studentsPassed = []; \n  const studentsFailed = []; \n  // Sorting students who passed and students who failed\n  props.students.map((stud) =>\n    stud.nGrade >= 50\n      ? studentsPassed.push({\n          id: stud.id,\n          fName: stud.fName,\n          lName: stud.lName,\n          nGrade: stud.nGrade\n        })\n      : studentsFailed.push({\n          id: stud.id,\n          fName: stud.fName,\n          lName: stud.lName,\n          nGrade: stud.nGrade\n        })\n  );\n  return (\n    <div>\n      <div className={rowStyle}>\n        <div className={colStyle}>\n          <StudentsPassedList students={studentsPassed} />\n        </div>\n        <div className={colStyle}>\n          <StudentsFailedList students={studentsFailed} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Summary;\n","/* This component implements functional and stateful type to make use of */\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport React, { useState } from 'react';\n\nfunction StudentModificationForm(props) {\n  const [nFName, setFName] = useState('');\n  const [nLName, setLName] = useState('');\n  const [nNGrade, setNGrade] = useState(-2);\n  console.log('i wa s called')\n  if (props.toggleForm) {\n    return (\n      <>\n        <Modal show={props.toggleForm} onHide={props.toggle}>\n          <Modal.Header closeButton>\n            <Modal.Title>Modify</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <InputGroup className='mb-3'>\n              <InputGroup.Prepend>\n                <InputGroup.Text id='basic-addon1'>First Name</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                onChange={(e) => setFName(e.target.value)}\n                placeholder={props.studToModify.fName}\n                aria-label='First Name'\n                aria-describedby='basic-addon1'\n                type='text'\n              />\n            </InputGroup>\n\n            <InputGroup className='mb-3'>\n              <InputGroup.Prepend>\n                <InputGroup.Text id='basic-addon1'>Last Name</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                onChange={(e) => setLName(e.target.value)}\n                placeholder={props.studToModify.lName}\n                aria-label='Last Name'\n                aria-describedby='basic-addon1'\n                type='text'\n              />\n            </InputGroup>\n\n            <InputGroup className='mb-3'>\n              <InputGroup.Prepend>\n                <InputGroup.Text id='basic-addon1'>\n                  Numeric Grade\n                </InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                onChange={(e) => setNGrade(e.target.value)}\n                placeholder={props.studToModify.nGrade}\n                aria-label='Numeric Grade'\n                aria-describedby='basic-addon1'\n                type='number'\n              />\n            </InputGroup>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant='primary'\n              onClick={props.handleModify.bind(this, [nFName, nLName, nNGrade])}\n            >\n              Save Changes\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  } else {\n    return null;\n  }\n}\nStudentModificationForm.defaultProps = {\n  toggleForm: false,\n};\nexport default StudentModificationForm;\n","import React, { Component } from 'react';\nimport StudentLister from './StudentLister';\nimport StudentList from './StudentList';\nimport Summary from './Summary';\nimport StudentModificationForm from './StudentModificationForm';\n// The parent component\n\nclass StudentDashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: -1, //  ID of the student to be modified\n      studToModify: null, // Only used as placeholder for the Modify modal form\n      toggleForm: false, //  true to show form when modify btn is clicked\n      students: [\n        //  Holds the current list of students\n        {\n          id: 1,\n          fName: 'Angelu Ferdinand',\n          lName: 'Garcia',\n          nGrade: 100,\n        },\n        {\n          id: 2,\n          fName: 'Lyra Angela',\n          lName: 'Manseguiao',\n          nGrade: 91,\n        },\n        {\n          id: 3,\n          fName: 'John',\n          lName: 'Doe',\n          nGrade: 49,\n        },\n        {\n          id: 4,\n          fName: 'Jack',\n          lName: 'Black',\n          nGrade: 32,\n        },\n        {\n          id: 5,\n          fName: 'Fun',\n          lName: 'Do',\n          nGrade: 81,\n        },\n      ],\n    };\n    this.handleSubmit = this.handleSubmit.bind(this); // Bind submit btn to this class\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleModify = this.handleModify.bind(this);\n    this.toggleForm = this.toggleForm.bind(this);\n  }\n\n  // Handles StudentLister's submit button\n  handleSubmit(newStudent) {\n    const [fName, lName, nGrade] = newStudent;\n    const id = Math.floor(Math.random() * (100 - 0)) + 0; // ID = random between 0-100\n    // Proper formatting\n    const studToAdd = {\n      id, // ES6 feature: these attributes are assigned to values from this local method\n      fName,\n      lName,\n      nGrade,\n    };\n    this.setState((state, props) => {\n      return {\n        students: [...state.students, studToAdd], // ES6 spread operator (like append) | copies by value instead of reference\n      };\n    });\n  }\n\n  // Handles Student's delete button\n  handleDelete(studentID) {\n    //delete student with studentID from state\n    // this.state.people.filter(item => item !== e.target.value)\n\n    this.setState((state, props) => {\n      return {\n        students: state.students.filter((stud) => stud.id !== studentID), // if equal to parameter, do not include it in new state\n      };\n    });\n  }\n\n  // Handles Student's modify button\n  handleModify(modifiedInfo) {\n    let [newFN, newLN, newNG] = modifiedInfo;\n    \n    // If any inputboxes left blanked, information is unchanged\n    if (newFN == null || newFN.trim() === '') newFN = this.state.studToModify.fName\n    if (newLN == null || newLN.trim() === '') newLN = this.state.studToModify.lName\n    if (newNG <= 0 || newNG === undefined) newNG = this.state.studToModify.nGrade\n    \n    this.setState((state, props) => {\n      return {\n        students: state.students.map((stud) => {\n          if (stud.id === this.state.id) {\n            stud.fName = newFN;\n            stud.lName = newLN;\n            stud.nGrade = newNG;\n          }\n          return stud;\n        }),\n      };\n    });\n  }\n\n  // Switch to show form\n  toggleForm(id) {\n    if (id !== undefined) {\n      this.setState((state, props) => {\n        return { id: id };\n      });\n      let object = this.state.students.find((o) => o.id === id); // Getting a reference of the student to modify\n      this.setState((state, props) => {\n        return { studToModify: object };\n      }); //  Updating student to modify\n    }\n\n    this.setState((state, props) => {\n      return { toggleForm: !state.toggleForm };\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className='container'>\n          <StudentLister handleSubmit={this.handleSubmit} />\n          {/* Passing a reference to handle Submit button  */}\n\n          <StudentList\n            students={this.state.students}\n            handleDelete={this.handleDelete}\n            toggleForm={this.toggleForm}\n          />\n\n          <Summary students={this.state.students} />\n          <StudentModificationForm\n            toggleForm={this.state.toggleForm /* current state of show/hide */}\n            studToModify={\n              this.state.studToModify /* passed to be used as placeholder */\n            }\n            toggle={\n              this\n                .toggleForm /*  handler that enables to set show/hide modal form */\n            }\n            handleModify = {this.handleModify}\n          />\n        </div>\n      </div>\n    );\n  }\n}\nexport default StudentDashboard;\n","import React from 'react';\n/* import './App.css'; */\nimport StudentDashboard from './components/StudentDashboard'\n\nfunction App() {\n  return (\n    <StudentDashboard />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n/* import 'bootstrap/dist/css/bootstrap.min.css'; */\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}